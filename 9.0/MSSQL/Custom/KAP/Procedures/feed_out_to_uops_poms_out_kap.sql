IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND name = 'feed_out_to_uops_poms_out_kap')
BEGIN
  DROP PROCEDURE feed_out_to_uops_poms_out_kap
END
GO

CREATE PROCEDURE feed_out_to_uops_poms_out_kap 
AS

/* 4/9/07 - KW - Created for Kaplan based on the existing S&S feed_out_to_uops_poms_out stored procedure. */

/*
  -- Generated by SQL Server Migration Assistant for Oracle
  --  Please, contact SSMAHELP@microsoft.com or visit http://www.microsoft.com/sql/migration for more information.
*/

BEGIN
    DECLARE 
      @ffeeddate datetime,
      @tfeeddate datetime,
      @i_count int,
      @v_isbn10 CHAR(10),
      @v_isbn13 CHAR(13),
      @v_isbnsuffix CHAR(3),
      @v_facility CHAR(3),
      @v_bindery CHAR(3),
      @v_ponumber CHAR(9),
      @v_podate CHAR(10),
      @v_bbdate CHAR(10),
      @v_reqdate CHAR(10),
      @v_origreprintind CHAR(1),
      @v_filler CHAR(1),
      @v_titlerelease CHAR(4),
      @v_quantity CHAR(7),
      @v_directshipqty CHAR(7),
      @v_printingnum CHAR(3),
      @v_orderstatus CHAR(1),
      @v_cartonqty CHAR(5),
      @v_changenum CHAR(3),
      @v_cost CHAR(10),
      @v_file_element CHAR(200),
      @v_OLEResult INT,
      @v_FS INT,
      @v_FolderExists BIT,
      @v_FileID INT,
      @v_ServerDir VARCHAR(255),
      @v_ServerFileName VARCHAR(255)
      
  
  SET @i_count = 0
    
      /*
        -- 10-31-99, AA  the old unix sql script performed remove old upload.fil,
        -- create backup directory for current date and bcp out the file, copy the
        -- file to the backup directory, then e-mail renee, harry and dba after all
        -- complete.
        -- bcp out to POMS/upload
        --*/

--7-17-06 push date back to oracle friday's data
--update pofeeddate
--set tentativefeeddate='2006-07-13 17:37:57.000',
--feeddate ='2006-07-13 17:37:57.000'
--where feeddatekey in (1,3)

      UPDATE dbo.POFEEDDATE
        SET dbo.POFEEDDATE.TENTATIVEFEEDDATE = getdate()
        WHERE (dbo.POFEEDDATE.FEEDDATEKEY = '1')

      /*  The following two sqls added 050498 LVR  */

      UPDATE dbo.POFEEDDATE
        SET dbo.POFEEDDATE.TENTATIVEFEEDDATE = 
          (
            SELECT dbo.POFEEDDATE.TENTATIVEFEEDDATE
              FROM dbo.POFEEDDATE
              WHERE (dbo.POFEEDDATE.FEEDDATEKEY = '1')
          )
        WHERE (dbo.POFEEDDATE.FEEDDATEKEY = '3')

      UPDATE dbo.POFEEDDATE
        SET dbo.POFEEDDATE.FEEDDATE = 
          (
            SELECT dbo.POFEEDDATE.FEEDDATE
              FROM dbo.POFEEDDATE
              WHERE (dbo.POFEEDDATE.FEEDDATEKEY = '1')
          )
        WHERE (dbo.POFEEDDATE.FEEDDATEKEY = '3')

      IF (@@TRANCOUNT > 0)
          COMMIT WORK

      /*  Populate qsidba.feed_kaplan_uopsupload table outside of POMS Application.  */

      SELECT @ffeeddate = dbo.POFEEDDATE.FEEDDATE, @tfeeddate = dbo.POFEEDDATE.TENTATIVEFEEDDATE
        FROM dbo.POFEEDDATE
        WHERE (dbo.POFEEDDATE.FEEDDATEKEY = '1')


      /*
        -- AA-- 6-09-05 check for any ccesatus that is null and pohistory final.. if any make ccestatus='F'
        -- 7-18-05 DO NOT DO THIS change to comment criteria r.ccestatus='F'
        -- 1-27-06  put back criteria ccestatus='F'  causing wip issues
        --*/

      /* select count(*) into i_count from pohistory p, printing p2 */

      /* where p.bookkey=p2.bookkey */

      /* and p.printingkey=p2.printingkey */

      /* and p2.ccestatus is null */

      /* and p.lastmaintdate >ffeeddate */

      /* and p.lastmaintdate < tfeeddate; */

      /* if i_count > 0 then */

      /*  */

      /* 	insert into feederror (batchnumber,errordesc,processdate) */

      /* 		 select '40','bookkey/printingkey printing.ccestatus updated by feed'|| */

      /* 		    to_char(p2.bookkey) ||'/'||to_char(p2.printingkey),sysdate */

      /* 				from pohistory p, printing p2 */

      /* 					 where p.bookkey=p2.bookkey */

      /* 						 and p.printingkey=p2.printingkey */

      /* 						 and p2.ccestatus is null */

      /* 						 and p.lastmaintdate >ffeeddate */

      /* 						 and p.lastmaintdate < tfeeddate; */

      /* 	commit; */

      /*  */

      /* 	update qsidba.printing */

      /* 	  set ccestatus='F' */

      /* 		where (bookkey,printingkey) in (select p2.bookkey,p2.printingkey */

      /* 			from pohistory p, printing p2 */

      /* 				where p.bookkey=p2.bookkey */

      /* 					and p.printingkey=p2.printingkey */

      /* 					and p2.ccestatus is null */

      /* 					and p.lastmaintdate >ffeeddate */

      /* 					and p.lastmaintdate < tfeeddate); */

      /*  commit; */

      /* end if; */

      /* ffeeddate := '15-MAR-2004'; */

      /* tfeeddate := sysdate; */

      INSERT INTO dbo.feed_kaplan_uopsupload
        (
          isbn13,
          isbn10,
          distributionctr, 
          vendorid, 
          ponumber, 
          podate, 
          boundbookdate, 
          daterequired, 
          origreprintind, 
          titlerelease, 
          quantity, 
          directshipqty, 
          printingkey, 
          bindstatus, 
          cartonqty, 
          changenum, 
          unitcost, 
          gpokey
        )          
        SELECT 
            isnull(i.ean13, ''),
            isnull(i.isbn10, ''), 
            '  ', 
            isnull(CASE (Substring(h.vendorid, 1, 3) + '.') WHEN '.' THEN NULL ELSE Substring(h.vendorid, 1, 3) END, '  '), 
            ltrim(rtrim( isnull(CASE (substring(h.ponumber, 1, 9) + '.') WHEN '.' THEN NULL ELSE Substring(h.ponumber, 1, 9) END, '         '))), 
            isnull(CASE (dbo.TO_CHAR_DATE(p.GPODATE, 'YYYY-MM-DD') + '.') WHEN '.' THEN NULL ELSE dbo.TO_CHAR_DATE(p.GPODATE, 'YYYY-MM-DD') END, '          '), 
            isnull(CASE (dbo.TO_CHAR_DATE(p.BOUNDBOOKDATE, 'YYYY-MM-DD') + '.') WHEN '.' THEN NULL ELSE dbo.TO_CHAR_DATE(p.BOUNDBOOKDATE, 'YYYY-MM-DD') END, '          '), 
            isnull(CASE (dbo.TO_CHAR_DATE(p.WAREHOUSEDATE, 'YYYY-MM-DD') + '.') WHEN '.' THEN NULL ELSE dbo.TO_CHAR_DATE(p.WAREHOUSEDATE, 'YYYY-MM-DD') END, '          '), 
            'R', 
            '0000', 
            dbo.LPAD_VARCHAR(isnull(CASE (CAST( h.QUANTITY AS varchar(20)) + '.') WHEN '.' THEN NULL ELSE CAST( h.QUANTITY AS varchar(200)) END, '0'), 7, '0'), 
            '0000000', 
            dbo.LPAD_VARCHAR(CAST( h.PRINTINGKEY AS varchar(20)), 3, '0'), 
            'A', 
            dbo.LPAD_VARCHAR(isnull(CASE (CAST( b.CARTONQTY1 AS varchar(20)) + '.') WHEN '.' THEN NULL ELSE CAST( b.CARTONQTY1 AS varchar(200)) END, '0'), 5, '0'), 
            dbo.LPAD_VARCHAR(isnull(CASE (CAST( h.CHANGENUM AS varchar(20)) + '.') WHEN '.' THEN NULL ELSE CAST( h.CHANGENUM AS varchar(200)) END, '0'), 3, '0'), 
            dbo.LPAD_VARCHAR(isnull(CASE (CAST( (h.UNITCOST * 10000) AS varchar(20)) + '.') WHEN '.' THEN NULL ELSE CAST( (h.UNITCOST * 10000) AS varchar(200)) END, '0'), 10, '0'), 
            p.GPOKEY
          FROM dbo.POHISTORY h, dbo.GPO p, dbo.ISBN i, dbo.BOOK bo, dbo.PRINTING r
              LEFT JOIN dbo.BINDINGSPECS b  ON ((r.BOOKKEY = b.BOOKKEY) AND (r.PRINTINGKEY = b.PRINTINGKEY))
          WHERE ((((h.LASTMAINTDATE >= @ffeeddate) AND 
                                  (h.LASTMAINTDATE < @tfeeddate)) OR 
                          ((r.DATECCEFINALIZED >= @ffeeddate) AND 
                                  (r.DATECCEFINALIZED < @tfeeddate))) AND 
                  (p.GPOKEY = h.POKEY) AND 
                  (h.BOOKKEY = r.BOOKKEY) AND 
                  (h.PRINTINGKEY = r.PRINTINGKEY) AND 
                  (h.ISBN = i.ISBN) AND 
                  (r.CCESTATUS = 'F') AND 
                  (i.BOOKKEY = bo.BOOKKEY) AND 
                  ((bo.REUSEISBNIND IS NULL) OR (bo.REUSEISBNIND = 0)))

      IF (@@TRANCOUNT > 0)
          COMMIT WORK


      /* Update titlerelease (Pub month in MMYY format) */
      
      UPDATE dbo.feed_kaplan_uopsupload
        SET titlerelease = 
          (
            SELECT dbo.TO_CHAR_DATE(p.PUBMONTH, 'MM') + dbo.TO_CHAR_DATE(p.PUBMONTH, 'YY')
            FROM dbo.ISBN i, dbo.PRINTING p, dbo.BOOK b
            WHERE u.isbn10 = i.ISBN10 AND 
                  i.BOOKKEY = p.BOOKKEY AND 
                  i.BOOKKEY = b.BOOKKEY AND
                  p.PRINTINGKEY = 1 AND
                  (b.REUSEISBNIND IS NULL OR b.REUSEISBNIND = 0)
          )
        FROM dbo.feed_kaplan_uopsupload u

      IF (@@TRANCOUNT > 0)
          COMMIT WORK


      /*  11-1-99 AA, get distributionctr from gposhiptovendor instead of po */
      /* 5-1-07 - Case 4666 - For Kaplan, get distributionctr (facility element in ascii file) from shiptovendorid */
      /*
      UPDATE dbo.feed_kaplan_uopsupload
        SET DISTRIBUTIONCTR = 
          (
            SELECT max(isnull(s.DISTRIBUTIONCTR, '   '))
              FROM dbo.GPO p, dbo.GPOSHIPTOVENDOR s
              WHERE ((u.GPOKEY = p.GPOKEY) AND 
                      (p.GPOKEY = s.GPOKEY))
          )
        FROM dbo.feed_kaplan_uopsupload u
      */
      
      UPDATE dbo.feed_kaplan_uopsupload
        SET DISTRIBUTIONCTR = 
          (
            SELECT max(isnull(s.shiptovendorid, '   '))
              FROM dbo.GPO p, dbo.GPOSHIPTOVENDOR s
              WHERE ((u.GPOKEY = p.GPOKEY) AND 
                      (p.GPOKEY = s.GPOKEY))
          )
        FROM dbo.feed_kaplan_uopsupload u      

      IF (@@TRANCOUNT > 0)
          COMMIT WORK

      /*
        -- 3-1-01 AA, get boundbookdate from bookdates since pohistory is picking up
        -- warehouse date instead of boundbookdate
        --*/

      /*  update qsidba.feed_uopsupload u */

      /*  	set u.boundbookdate = (select NVL(to_char(bd.bestdate,'YYYY-MM-DD'),'          ') */

      /*  		from qsidba.bookdates bd,qsidba.isbn i,book bo */

      /*  			where  substr(u.isbn,1,10) = i.isbn10 */

      /*  				and i.bookkey = bd.bookkey */

      /*  				and i.bookkey=bo.bookkey */

      /*  				and (bo.reuseisbnind is null or bo.reuseisbnind = 0) */

      /*  				and bd.printingkey= to_number(u.printingkey) */

      /*  				and bd.datetypecode=30); */

      /*  */

      /*  COMMIT; */

      /* 2-21-06 AA if warehousedate blank on gpo then get from bookdates */

      UPDATE dbo.feed_kaplan_uopsupload
        SET DATEREQUIRED = 
          (
            SELECT isnull(CASE (dbo.TO_CHAR_DATE(bd.BESTDATE, 'YYYY-MM-DD') + '.') WHEN '.' THEN NULL ELSE dbo.TO_CHAR_DATE(bd.BESTDATE, 'YYYY-MM-DD') END, '          ')
            FROM dbo.BOOKDATES bd, dbo.ISBN i, dbo.BOOK bo, dbo.BOOKORGENTRY bg
            WHERE (u.isbn10 = i.ISBN10) AND 
                  (i.BOOKKEY = bd.BOOKKEY) AND 
                  (i.BOOKKEY = bo.BOOKKEY) AND 
                  (i.BOOKKEY = bg.BOOKKEY) AND 
                  (bg.ORGENTRYKEY = 3) AND 
                  ((bo.REUSEISBNIND IS NULL) OR (bo.REUSEISBNIND = 0)) AND 
                  (bd.PRINTINGKEY = CAST( u.PRINTINGKEY AS float)) AND 
                  (bd.DATETYPECODE = 47) AND 
                  (u.DATEREQUIRED = '          ')
          )
        FROM dbo.feed_kaplan_uopsupload u
        WHERE (u.DATEREQUIRED = '          ')

      IF (@@TRANCOUNT > 0)
          COMMIT WORK


      /*  Get Cancelled POs from pocancellation.  */

      INSERT INTO dbo.feed_kaplan_uopsupload
        (
          isbn10, 
          isbn13,
          ponumber, 
          directshipqty, 
          printingkey, 
          bindstatus, 
          cartonqty, 
          changenum
        )
      SELECT 
          isnull(c.isbn10, ''), 
          isnull(i.ean13, ''),
          isnull(CASE (Substring(c.PONUMBER, 1, 9) + '.') WHEN '.' THEN NULL ELSE Substring(c.PONUMBER, 1, 9) END, '         '), 
          '0000000', 
          dbo.LPAD_VARCHAR(CAST( c.PRINTINGKEY AS varchar(200)), 3, '0'), 
          'X', 
          dbo.LPAD_VARCHAR(isnull(CASE (CAST( b.CARTONQTY1 AS varchar(200)) + '.') WHEN '.' THEN NULL ELSE CAST( b.CARTONQTY1 AS varchar(200)) END, '0'), 5, '0'), 
          dbo.LPAD_VARCHAR(isnull(CASE (CAST( p.GPOCHANGENUM AS varchar(200)) + '.') WHEN '.' THEN NULL ELSE CAST( p.GPOCHANGENUM AS varchar(200)) END, '0'), 3, '0')
      FROM dbo.GPO p, dbo.isbn i, dbo.POCANCELLATION c
          LEFT JOIN dbo.BINDINGSPECS b ON ((c.BOOKKEY = b.BOOKKEY) AND (c.PRINTINGKEY = b.PRINTINGKEY))
          LEFT JOIN dbo.BOOK bb ON (b.BOOKKEY = bb.BOOKKEY)
      WHERE ((c.DATECANCELLED >= @ffeeddate) AND 
          (c.DATECANCELLED < @tfeeddate) AND 
          (c.isbn10 = i.isbn10) AND
          (p.GPOKEY = c.POKEY) AND 
          ((bb.REUSEISBNIND IS NULL) OR 
          (bb.REUSEISBNIND = 0)) AND 
          (p.GPOSTATUS = 'V'))

      IF (@@TRANCOUNT > 0)
          COMMIT WORK

      /*  Set bindstatus to C - Changed if datefinalized for PO is earlier than pofeeddate  */

      UPDATE dbo.feed_kaplan_uopsupload
      SET BINDSTATUS = 'C'
      FROM dbo.feed_kaplan_uopsupload ud
      WHERE ud.isbn10 IN
        ( 
          SELECT u.isbn10
          FROM dbo.feed_kaplan_uopsupload u, dbo.ISBN i, dbo.POHISTORY h
          WHERE ((u.isbn10 = i.isbn10) AND 
                (i.BOOKKEY = h.BOOKKEY) AND 
                (CAST( u.PRINTINGKEY AS float) = h.PRINTINGKEY) AND 
                (h.DATEFINALIZED < @ffeeddate))
        )

      IF (@@TRANCOUNT > 0)
          COMMIT WORK

      /*  End Modification of bindstatus -- 10/30/1997  */

      /*  Set NEXT pofeeddate from tentativefeeddate.  */

      UPDATE dbo.POFEEDDATE
        SET dbo.POFEEDDATE.FEEDDATE = dbo.POFEEDDATE.TENTATIVEFEEDDATE
        WHERE (dbo.POFEEDDATE.FEEDDATEKEY = '1')

      IF (@@TRANCOUNT > 0)
          COMMIT WORK

      /*  whse98 and 99 no longer used; sum quantity from all ship to vendors  */

      UPDATE dbo.feed_kaplan_uopsupload
        SET DIRECTSHIPQTY = 
          (
            SELECT dbo.LPAD_VARCHAR(CAST(sum(t.QUANTITY) AS varchar(8000)), 7, '0')
              FROM dbo.ISBN i, dbo.GPOSECTION t, dbo.PRINTING r
              WHERE ((u.isbn10 = i.ISBN10) AND 
                    (i.BOOKKEY = t.KEY1) AND 
                    (t.KEY1 = r.BOOKKEY) AND 
                    (t.KEY2 = r.PRINTINGKEY) AND 
                    (t.KEY3 = 2) AND 
                    (t.SECTIONTYPE = 3) AND 
                    (t.GPOKEY = u.GPOKEY))
          )
        FROM dbo.feed_kaplan_uopsupload u

      IF (@@TRANCOUNT > 0)
          COMMIT WORK

      /*  Clear columns and flag as canceled in row exists in pocancellation.  */

      UPDATE dbo.feed_kaplan_uopsupload
        SET 
          distributionctr = '   ', 
          vendorid = '   ', 
          podate = '          ', 
          boundbookdate = '          ', 
          daterequired = '          ', 
          origreprintind = ' ', 
          titlerelease = '    ', 
          quantity = '00000', 
          unitcost = '0000000000'
        WHERE bindstatus = 'X'

      IF (@@TRANCOUNT > 0)
          COMMIT WORK

      /*
        -- #########################################################
        --    Modify feed_uopsupload date fields (columns) to be formated as
        --    YYYY-MM-DD instead of YYY/MM/DD. 10-29-99 AA, no longer need to do in oracle
        --*/

      /*
        -- update qsidba.feed_uopsupload
        -- set podate =
        -- substr(podate, 1, 4) + '-' +
        -- substr(podate, 6, 2) + '-' +
        -- substr(podate, 9, 2)
        -- where podate > ''
        -- ;
        -- update qsidba.feed_uopsupload
        -- set boundbookdate =
        -- substr(boundbookdate, 1, 4) + '-' +
        -- substr(boundbookdate, 6, 2) + '-' +
        -- substr(boundbookdate, 9, 2)
        -- where boundbookdate > ''
        -- ;
        -- update qsidba.feed_uopsupload
        -- set daterequired =
        -- substr(daterequired, 1, 4) + '-' +
        -- substr(daterequired, 6, 2) + '-' +
        -- substr(daterequired, 9, 2)
        -- where daterequired > ''
        -- ;
        --*/

      /*
        -- ###############################################
        --    Right justify and Zero-fill the printingkey.
        --*/

      UPDATE dbo.feed_kaplan_uopsupload
        SET printingkey = dbo.LPAD_VARCHAR(printingkey, 3, '0')

      IF (@@TRANCOUNT > 0)
          COMMIT WORK

      /*
        -- #############################################
        --    Right justify and Zero-fill the changenum.
        --*/

      UPDATE dbo.feed_kaplan_uopsupload
        SET changenum = dbo.LPAD_VARCHAR(changenum, 3, '0')

      UPDATE dbo.feed_kaplan_uopsupload
        SET changenum = '000'
        WHERE changenum = '' OR changenum IS NULL

      IF (@@TRANCOUNT > 0)
          COMMIT WORK

      /*
        -- ############################################
        --    Right justify and Zero-fill the quantity.
        --*/

      UPDATE dbo.feed_kaplan_uopsupload
        SET quantity = dbo.LPAD_VARCHAR(quantity, 7, '0')

      UPDATE dbo.feed_kaplan_uopsupload
        SET quantity = '0000000'
        WHERE quantity = '' OR quantity IS NULL

      IF (@@TRANCOUNT > 0)
          COMMIT WORK

      /*
        -- #################################################
        --    Right justify and Zero-fill the directshipqty.
        --*/

      UPDATE dbo.feed_kaplan_uopsupload
        SET directshipqty = dbo.LPAD_VARCHAR(directshipqty, 7, '0')

      UPDATE dbo.feed_kaplan_uopsupload
        SET directshipqty = '0000000'
        WHERE directshipqty = '' OR directshipqty IS NULL

      IF (@@TRANCOUNT > 0)
          COMMIT WORK

      /*
        -- #############################################
        --    Right justify and Zero-fill the cartonqty.
        --*/

      UPDATE dbo.feed_kaplan_uopsupload
        SET cartonqty = dbo.LPAD_VARCHAR(cartonqty, 5, '0')

      UPDATE dbo.feed_kaplan_uopsupload
        SET cartonqty = '00000'
        WHERE cartonqty = '' OR cartonqty IS NULL

      IF (@@TRANCOUNT > 0)
          COMMIT WORK

      /*
        -- ###########################################################
        --    Right Justify and Zero-fill the unitcost
        --*/

      UPDATE dbo.feed_kaplan_uopsupload
        SET unitcost = dbo.LPAD_VARCHAR(unitcost, 10, '0')

      UPDATE dbo.feed_kaplan_uopsupload
        SET unitcost = '0000000000'
        WHERE unitcost = '' OR unitcost IS NULL

      IF (@@TRANCOUNT > 0)
          COMMIT WORK

      /* 8-18-05 add to  make sure no po go without a ponumber */

      UPDATE dbo.feed_kaplan_uopsupload
        SET PONUMBER = 
          (
            SELECT dbo.RPAD_VARCHAR(g.GPONUMBER, 9, ' ')
              FROM dbo.GPO g
              WHERE ((g.GPOKEY = u.GPOKEY) AND 
                      (u.PONUMBER IS NULL))
          )
        FROM dbo.feed_kaplan_uopsupload u
        WHERE (u.PONUMBER IS NULL)

      IF (@@TRANCOUNT > 0)
          COMMIT WORK

/*althea 7-12-06 add to  make sure no pohistory row missing a ponumber.. fixed all prior to 7/12/06 so go forward*/

      UPDATE dbo.POHISTORY
        SET PONUMBER = 
          (
            SELECT dbo.RPAD_VARCHAR(g.GPONUMBER, 9, ' ')
              FROM dbo.GPO g
              WHERE ((g.GPOKEY = u.GPOKEY) AND 
                      (u.PONUMBER IS NULL))
          )
        FROM dbo.feed_kaplan_uopsupload u
        WHERE (u.PONUMBER IS NULL)

      IF (@@TRANCOUNT > 0)
          COMMIT WORK


      UPDATE dbo.feed_kaplan_uopsupload
        SET ponumber = dbo.RPAD_VARCHAR(ponumber, 9, ' ')

      UPDATE dbo.feed_kaplan_uopsupload
        SET ponumber = '         '
        WHERE ponumber = '' OR ponumber IS NULL

      IF (@@TRANCOUNT > 0)
          COMMIT WORK


      UPDATE dbo.feed_kaplan_uopsupload
        SET vendorid = dbo.RPAD_VARCHAR(vendorid, 3, ' ')

      UPDATE dbo.feed_kaplan_uopsupload
        SET vendorid = '   '
        WHERE vendorid = '' OR vendorid IS NULL

      IF (@@TRANCOUNT > 0)
          COMMIT WORK


      UPDATE dbo.feed_kaplan_uopsupload
        SET titlerelease = dbo.RPAD_VARCHAR(titlerelease, '0', DEFAULT)

      UPDATE dbo.feed_kaplan_uopsupload
        SET titlerelease = '0000'
        WHERE titlerelease IS NULL

      IF (@@TRANCOUNT > 0)
          COMMIT WORK

      /*
        -- ###########################################################
        --    Pad dates
        --*/

      UPDATE dbo.feed_kaplan_uopsupload
        SET podate = '          '
        WHERE podate = '' OR podate IS NULL

      UPDATE dbo.feed_kaplan_uopsupload
        SET boundbookdate = '          '
        WHERE boundbookdate = '' OR boundbookdate IS NULL

      UPDATE dbo.feed_kaplan_uopsupload
        SET daterequired = '          '
        WHERE daterequired = '' OR daterequired IS NULL

      IF (@@TRANCOUNT > 0)
          COMMIT WORK

      /*
        -- # #########################################################
        --    Change the bind status to 'C' if poms_out.changenum = 0.
        --*/

      UPDATE dbo.feed_kaplan_uopsupload
        SET bindstatus = 'C'
        WHERE (changenum > '000')

      IF (@@TRANCOUNT > 0)
          COMMIT WORK

      /*  Change the origreprintind to 'N' if poms_out.printingkey = 1.  */

      UPDATE dbo.feed_kaplan_uopsupload
        SET origreprintind = 'N'
        WHERE printingkey = '001' AND 
              bindstatus <> 'X'

      /*  Change bindstatus = 'A' (Add) if no rows exist in feed_kaplan_uopsuploadhistory  */

      /*  Changed 11/03/97 by ELFIII  */

      UPDATE dbo.feed_kaplan_uopsupload
        SET BINDSTATUS = 'A'
        FROM dbo.feed_kaplan_uopsupload u
        WHERE u.BINDSTATUS <> 'X' AND 
              NOT EXISTS
              ( 
                SELECT * 
                FROM dbo.feed_kaplan_uopsuploadhistory uh
                WHERE uh.isbn10 = u.isbn10 AND 
                      uh.PRINTINGKEY = u.PRINTINGKEY
              )

      IF (@@TRANCOUNT > 0)
          COMMIT WORK

      /*  End Mod 11/03/97  */

      /*
        -- Copy the new PO's from qsidba.feed_uopsupload to qsidba.feed_poms_out
        --    and backup the data into qsidba.feed_uopsuploadhistory.
        --*/

      -- Truncate table
      DELETE FROM dbo.feedout_kaplan_poms_out

      IF (@@TRANCOUNT > 0)
        COMMIT WORK

      INSERT INTO dbo.feedout_kaplan_poms_out
        (
          isbn10, 
          isbn13,
          distributionctr, 
          vendorid, 
          ponumber, 
          podate, 
          boundbookdate, 
          daterequired, 
          origreprintind, 
          titlerelease, 
          quantity, 
          directshipqty, 
          printingkey, 
          bindstatus, 
          cartonqty, 
          changenum, 
          unitcost,
          lastuserid,
          lastmaintdate
        )
        SELECT 
          isbn10, 
          isbn13,
          distributionctr, 
          vendorid, 
          ponumber, 
          podate, 
          boundbookdate, 
          daterequired, 
          origreprintind, 
          titlerelease, 
          quantity, 
          directshipqty, 
          printingkey, 
          bindstatus, 
          cartonqty, 
          changenum, 
          unitcost,
          'KAP_FEEDOUT',
          getdate()        
        FROM dbo.feed_kaplan_uopsupload

      IF (@@TRANCOUNT > 0)
          COMMIT WORK

      /*
      UPDATE dbo.feedout_kaplan_poms_out
        SET DISTRIBUTIONCTR = 
          (
            SELECT max(isnull(s.DISTRIBUTIONCTR, '   '))
              FROM dbo.GPO p, dbo.GPOSHIPTOVENDOR s, dbo.feed_kaplan_uopsupload uo
              WHERE ((u.isbn10 = uo.isbn10) AND 
                      (uo.GPOKEY = p.GPOKEY) AND 
                      (p.GPOKEY = s.GPOKEY))
          )
        FROM dbo.feedout_kaplan_poms_out u
      */
      
      /* 5-1-07 - Case 4666 - For Kaplan, get distributionctr (facility element in ascii file) from shiptovendorid */      
      UPDATE dbo.feedout_kaplan_poms_out
        SET DISTRIBUTIONCTR = 
          (
            SELECT max(isnull(s.shiptovendorid, '   '))
              FROM dbo.GPO p, dbo.GPOSHIPTOVENDOR s, dbo.feed_kaplan_uopsupload uo
              WHERE ((u.isbn10 = uo.isbn10) AND 
                      (uo.GPOKEY = p.GPOKEY) AND 
                      (p.GPOKEY = s.GPOKEY))
          )
        FROM dbo.feedout_kaplan_poms_out u

      IF (@@TRANCOUNT > 0)
          COMMIT WORK


      UPDATE dbo.feedout_kaplan_poms_out
        SET distributionctr = '   '
        WHERE distributionctr = '' OR distributionctr IS NULL

      IF (@@TRANCOUNT > 0)
          COMMIT WORK


      DELETE FROM dbo.feed_kaplan_uopsupload
        FROM dbo.feed_kaplan_uopsupload u
        WHERE u.isbn10 IN
          ( 
            SELECT a.isbn10
            FROM dbo.feed_kaplan_uopsupload a, dbo.feedout_kaplan_poms_out b
            WHERE (isnull(a.isbn10, 'XXX') = isnull(b.isbn10, 'XXX')) AND 
                  (isnull(a.DISTRIBUTIONCTR, 'XXX') = isnull(b.DISTRIBUTIONCTR, 'XXX')) AND 
                  (isnull(a.VENDORID, 'XXX') = isnull(b.VENDORID, 'XXX')) AND 
                  (isnull(a.PONUMBER, 'XXX') = isnull(b.PONUMBER, 'XXX')) AND 
                  (isnull(a.PODATE, 'XXX') = isnull(b.PODATE, 'XXX')) AND 
                  (isnull(a.BOUNDBOOKDATE, 'XXX') = isnull(b.BOUNDBOOKDATE, 'XXX')) AND 
                  (isnull(a.DATEREQUIRED, 'XXX') = isnull(b.DATEREQUIRED, 'XXX')) AND 
                  (isnull(a.ORIGREPRINTIND, 'XXX') = isnull(b.ORIGREPRINTIND, 'XXX')) AND 
                  (isnull(a.titlerelease, 'XXXX') = isnull(b.titlerelease, 'XXXX')) AND 
                  (isnull(a.QUANTITY, 'XXX') = isnull(b.QUANTITY, 'XXX')) AND 
                  (isnull(a.DIRECTSHIPQTY, 'XXX') = isnull(b.DIRECTSHIPQTY, 'XXX')) AND 
                  (isnull(a.PRINTINGKEY, 'XXX') = isnull(b.PRINTINGKEY, 'XXX')) AND 
                  (isnull(a.BINDSTATUS, 'XXX') = isnull(b.BINDSTATUS, 'XXX')) AND 
                  (isnull(a.CARTONQTY, 'XXX') = isnull(b.CARTONQTY, 'XXX')) AND 
                  (isnull(a.CHANGENUM, 'XXX') = isnull(b.CHANGENUM, 'XXX')) AND 
                  (isnull(a.UNITCOST, 'XXX') = isnull(b.UNITCOST, 'XXX'))
          )

      IF (@@TRANCOUNT > 0)
          COMMIT WORK


      UPDATE dbo.feedout_kaplan_poms_out
        SET titlerelease = 
          (
            SELECT dbo.TO_CHAR_DATE(p.PUBMONTH, 'MM') + dbo.TO_CHAR_DATE(p.PUBMONTH, 'YY')
            FROM dbo.ISBN i, dbo.PRINTING p, dbo.BOOK b
            WHERE u.isbn10 = i.ISBN10 AND 
                  i.BOOKKEY = p.BOOKKEY AND 
                  i.BOOKKEY = b.BOOKKEY AND
                  u.PRINTINGKEY = p.printingkey AND
                  (b.REUSEISBNIND IS NULL OR b.REUSEISBNIND = 0)
          )
        FROM dbo.feedout_kaplan_poms_out u
        WHERE (u.BINDSTATUS <> 'X')

      IF (@@TRANCOUNT > 0)
          COMMIT WORK


      UPDATE dbo.feedout_kaplan_poms_out
        SET titlerelease = '0000'
        WHERE titlerelease IS NULL

      IF (@@TRANCOUNT > 0)
          COMMIT WORK



      INSERT INTO dbo.feed_kaplan_uopsuploadhistory
        (
          historydate, 
          isbn13, 
          isbn10,
          distributionctr, 
          vendorid, 
          ponumber, 
          podate, 
          boundbookdate, 
          daterequired, 
          origreprintind, 
          titlerelease,  
          quantity, 
          directshipqty, 
          printingkey, 
          bindstatus, 
          cartonqty, 
          changenum, 
          unitcost
        )
        SELECT 
            getdate(), 
            p.isbn13, 
            p.isbn10,
            p.DISTRIBUTIONCTR, 
            p.VENDORID, 
            p.PONUMBER, 
            p.PODATE, 
            p.BOUNDBOOKDATE, 
            p.DATEREQUIRED, 
            p.ORIGREPRINTIND, 
            p.titlerelease, 
            p.QUANTITY, 
            p.DIRECTSHIPQTY, 
            p.PRINTINGKEY, 
            p.BINDSTATUS, 
            p.CARTONQTY, 
            p.CHANGENUM, 
            p.UNITCOST
          FROM dbo.feedout_kaplan_poms_out p

      IF (@@TRANCOUNT > 0)
          COMMIT WORK



  --**********************************************************************
  --****** Create the ASCII file from feedout_kaplan_poms_out table ******
  --**********************************************************************
  SET @v_ServerDir = 'c:\titleweb1\feedout\'
  SET @v_ServerFileName = 'kaplan_bind_po.dat'
  
  SET @v_isbnsuffix = '000'
  SET @v_filler = '0'
  SET @v_cost = '0000000000'  --don't send unit cost to S&S (otherwise it is feedout_kaplan_poms_out.unitcost)
  
  -- Create FileSystemObject
  EXEC @v_OLEResult = sp_OACreate 'Scripting.FileSystemObject', @v_FS OUT
  IF @v_OLEResult <> 0 BEGIN
    PRINT 'Error: Scripting.FileSystemObject failed.'
    GOTO destroy
  END
  
  -- Check if server directory is valid (verify that folder exists)
  EXEC @v_OLEResult = sp_OAMethod @v_FS, 'FolderExists', @v_FolderExists OUT, @v_ServerDir
  IF @v_OLEResult <> 0 BEGIN
    PRINT 'Error: FolderExists failed.'
    GOTO destroy
  END
    
  -- Folder location must exist on server
  IF @v_FolderExists = 0
  BEGIN
    PRINT 'Folder ' + @v_ServerDir + ' does not exist on server.'
    GOTO destroy
  END
  
  -- Full server source file name
  SET @v_ServerFileName = @v_ServerDir + @v_ServerFileName
  
  -- Open source file for writing
  EXEC @v_OLEResult = sp_OAMethod @v_FS, 'OpenTextFile', @v_FileID OUT, @v_ServerFileName, 2, 1
  IF @v_OLEResult <> 0 BEGIN
    PRINT 'Error: OpenTextFile failed (' + @v_ServerFileName + ').'
    GOTO destroy
  END
  
  -- Loop through all feedout_kaplan_poms_out records and write each record to the source file
  DECLARE feedout_cur CURSOR LOCAL FOR 
    SELECT isbn10, isbn13, distributionctr, vendorid, ponumber, podate, boundbookdate, 
      daterequired, origreprintind, titlerelease, quantity, directshipqty, printingkey,
      bindstatus, cartonqty, changenum
    FROM feedout_kaplan_poms_out

  OPEN feedout_cur

  FETCH NEXT FROM feedout_cur 
  INTO @v_isbn10, @v_isbn13, @v_facility, @v_bindery, @v_ponumber, @v_podate, @v_bbdate, 
    @v_reqdate, @v_origreprintind, @v_titlerelease, @v_quantity, @v_directshipqty, @v_printingnum,
    @v_orderstatus, @v_cartonqty, @v_changenum

  WHILE NOT(@@FETCH_STATUS = -1)
  BEGIN
    
    SET @v_file_element = @v_isbn10 + @v_isbnsuffix + @v_facility + @v_bindery + @v_ponumber + 
        @v_podate + @v_bbdate + @v_reqdate + @v_origreprintind + @v_filler + 
        @v_titlerelease + @v_quantity + @v_directshipqty + @v_printingnum + 
        @v_orderstatus + @v_cartonqty + @v_changenum + @v_cost + @v_isbn13
      
    -- Write out this record to source file
    EXEC @v_OLEResult = sp_OAMethod @v_FileID, 'WriteLine', Null, @v_file_element
    IF @v_OLEResult <> 0 BEGIN
      PRINT 'Error: WriteLine failed (' + @v_ServerFileName + ').'
      CLOSE feedout_cur
      DEALLOCATE feedout_cur      
      GOTO destroy
    END
    
    FETCH NEXT FROM feedout_cur 
    INTO @v_isbn10, @v_isbn13, @v_facility, @v_bindery, @v_ponumber, @v_podate, @v_bbdate, 
      @v_reqdate, @v_origreprintind, @v_titlerelease, @v_quantity, @v_directshipqty, @v_printingnum,
      @v_orderstatus, @v_cartonqty, @v_changenum
    
  END --WHILE
  
  CLOSE feedout_cur
  DEALLOCATE feedout_cur
  
 
  destroy:
  EXECUTE @v_OLEResult = sp_OADestroy @v_FileID
  EXECUTE @v_OLEResult = sp_OADestroy @v_FS
  
END
go

GRANT EXEC ON feed_out_to_uops_poms_out_kap TO PUBLIC
GO
