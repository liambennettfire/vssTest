IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND name = 'est_batch_reprint_result')
BEGIN
  DROP  Procedure  est_batch_reprint_result
END
GO

  CREATE 
    PROCEDURE dbo.est_batch_reprint_result 
    AS
      /*
       -- Generated by SQL Server Migration Assistant for Oracle
       --  Please, contact SSMAHELP@microsoft.com or visit http://www.microsoft.com/sql/migration for more information.
       --*/
      BEGIN
          DECLARE 

            /*****
            *  WARNING ORA2MS-4016 line: 20 col: 10: Type number of variable v_estkey  was changed to integer
            *****/

            @v_estkey integer,
            @v_data$BOOKKEY integer,
            @v_data$PRINTINGKEY integer,
            @v_data$ISBNX varchar(8000),
            @v_data_estversion$VERSIONQTYTYPECODE integer,
            @v_data_estversion$FINISHEDGOODQTY integer,
            @v_data_estversion$VERSIONKEY integer,
            @v_data_estversion$ACTIVEIND integer,
            @v_jobkey integer,
            @v_batchkey integer,
            @v_cnt integer,
            @v_retcode integer,
            @v_error_desc varchar(500),
            @v_max_printingkey integer,
            @v_total_royalty integer,
            @v_return_rate integer,
            @v_net_copies integer,
            @v_total_unitcost integer,
            @v_royalty_per_copy integer,
            @v_plant_unit_cost integer,
            @v_plant_total_cost integer,
            @v_edition_unit_cost integer,
            @v_edition_total_cost integer,
	    @v_errorseverity integer,
	    @newkey integer
          BEGIN

            DECLARE 
              @param_expr_6 VARCHAR(8000)            

            SET @param_expr_6 = user_name()

            EXEC WRITE_QSIJOBMESSAGE @v_batchkey OUTPUT, @v_jobkey OUTPUT, 1, 7, 'Estimate Batch', 'Est. Batch', @param_expr_6, 0, 0, 0, 1, 'Reprint Result Process Started', 'Reprint Result Process Started', @v_retcode OUTPUT, @v_error_desc OUTPUT 

            DELETE FROM ESTBATCHREPRINTRESULT

            BEGIN

              DECLARE 
                @v_data$BOOKKEY$2 integer,
                @v_data$PRINTINGKEY$2 integer,
                @v_data$ISBNX$2 varchar(8000)              

              DECLARE 
                c_cursor CURSOR LOCAL 
                 FOR 
                  SELECT CORETITLEINFO.BOOKKEY, CORETITLEINFO.PRINTINGKEY, CORETITLEINFO.ISBNX
                    FROM CORETITLEINFO, BOOKORGENTRY
                    WHERE ((CORETITLEINFO.BOOKKEY = BOOKORGENTRY.BOOKKEY) AND 
                            (BOOKORGENTRY.ORGENTRYKEY IN (7, 8, 498, 591, 592, 823, 885, 886, 887, 1062 )) AND 
                            (BOOKORGENTRY.ORGLEVELKEY = 2) AND 
                            (ISNULL((CORETITLEINFO.ISBNX + '.'), '.') <> '.'))
              

              OPEN c_cursor

              FETCH NEXT FROM c_cursor
                INTO @v_data$BOOKKEY$2, @v_data$PRINTINGKEY$2, @v_data$ISBNX$2

              WHILE  NOT(@@FETCH_STATUS = -1)
                BEGIN

                  SELECT @v_max_printingkey = isnull(max(ESTBOOK.PRINTINGKEY), 0)
                    FROM ESTBOOK, ESTVERSION
                    WHERE ((ESTBOOK.ESTKEY = ESTVERSION.ESTKEY) AND 
                            (ESTVERSION.VERSIONQTYTYPECODE = 5) AND 
                            (ESTVERSION.ACTIVEIND = 1) AND 
                            (ESTBOOK.BOOKKEY = @v_data$BOOKKEY$2))


                  /* Find the highest active reprint vendor grid printing for this title. */

                  /*  Added 'and v_data.printingkey = v_max_printingkey' by DSL 8/24/05 to prevent outputting results */

                  /*  for when multiple printings exist. Without this added condition, the top cursor loop - c_cursor - */

                  /*  repeats for each printing for the title outputting */

                  /*  for the Max Printing each time it loops */

                  IF ((@v_max_printingkey > 0) AND 
                          (@v_data$PRINTINGKEY$2 = @v_max_printingkey))
                    BEGIN

                      SELECT DISTINCT @v_estkey = ESTBOOK.ESTKEY
                        FROM ESTBOOK, ESTVERSION
                        WHERE ((ESTBOOK.ESTKEY = ESTVERSION.ESTKEY) AND 
                                (ESTVERSION.VERSIONQTYTYPECODE = 5) AND 
                                (ESTVERSION.ACTIVEIND = 1) AND 
                                (ESTBOOK.BOOKKEY = @v_data$BOOKKEY$2) AND 
                                (ESTBOOK.PRINTINGKEY = @v_max_printingkey))


                      /*  if versionqtytype is Reprint Vendor Grid then create estbatchreprintresult record. */

                      BEGIN

                        DECLARE 
                          @v_data_estversion$VERSIONQTYTYPECODE$2 integer,
                          @v_data_estversion$FINISHEDGOODQTY$2 integer,
                          @v_data_estversion$VERSIONKEY$2 integer,
                          @v_data_estversion$ACTIVEIND$2 integer                        

                        DECLARE 
                          c_estversion CURSOR LOCAL 
                           FOR 
                            SELECT 
                                ESTVERSION.VERSIONQTYTYPECODE, 
                                ESTVERSION.FINISHEDGOODQTY, 
                                ESTVERSION.VERSIONKEY, 
                                ESTVERSION.ACTIVEIND
                              FROM ESTVERSION
                              WHERE (ESTVERSION.ESTKEY = @v_estkey)
                        

                        OPEN c_estversion

                        FETCH NEXT FROM c_estversion
                          INTO 
                            @v_data_estversion$VERSIONQTYTYPECODE$2, 
                            @v_data_estversion$FINISHEDGOODQTY$2, 
                            @v_data_estversion$VERSIONKEY$2, 
                            @v_data_estversion$ACTIVEIND$2



                        WHILE  NOT(@@FETCH_STATUS = -1)
                          BEGIN
                            IF ((@v_data_estversion$VERSIONQTYTYPECODE$2 = 5) AND 
                                    (@v_data_estversion$ACTIVEIND$2 = 1))
                              BEGIN

                                /* get edtion cost */

                                SELECT @v_edition_total_cost = isnull(SUM(ESTCOST.TOTALCOST), 0)
                                  FROM CDLIST, ESTCOST
                                  WHERE ((CDLIST.INTERNALCODE = ESTCOST.CHGCODECODE) AND 
                                          (ESTCOST.ESTKEY = @v_estkey) AND 
                                          (upper(CDLIST.COSTTYPE) = 'E') AND 
                                          (ESTCOST.VERSIONKEY = @v_data_estversion$VERSIONKEY$2))

                                SET @v_edition_unit_cost = (@v_edition_total_cost / @v_data_estversion$FINISHEDGOODQTY$2)

                                /* get plant cost */

                                SELECT @v_plant_total_cost = isnull(SUM(ESTCOST.TOTALCOST), 0), @v_plant_unit_cost = isnull(SUM(ESTCOST.UNITCOST), 0)
                                  FROM CDLIST, ESTCOST
                                  WHERE ((CDLIST.INTERNALCODE = ESTCOST.CHGCODECODE) AND 
                                          (ESTCOST.ESTKEY = @v_estkey) AND 
                                          (upper(CDLIST.COSTTYPE) = 'P') AND 
                                          (ESTCOST.VERSIONKEY = @v_data_estversion$VERSIONKEY$2))


                                /* get total unit cost */

                                SET @v_total_unitcost = (@v_edition_unit_cost + @v_plant_unit_cost)

                                /* calculate royalty per copy */

                                SELECT @v_cnt = count(ESTPLSPECS.TOTALROYALTY)
                                  FROM ESTPLSPECS
                                  WHERE ((ESTPLSPECS.ESTKEY = @v_estkey) AND 
                                          (ESTPLSPECS.VERSIONKEY = @v_data_estversion$VERSIONKEY$2))

                                IF (@v_cnt > 0)
                                  BEGIN

                                    SELECT @v_total_royalty = ESTPLSPECS.TOTALROYALTY, @v_return_rate = ESTPLSPECS.RETURNRATE
                                      FROM ESTPLSPECS
                                      WHERE ((ESTPLSPECS.ESTKEY = @v_estkey) AND 
                                              (ESTPLSPECS.VERSIONKEY = @v_data_estversion$VERSIONKEY$2))


                                    SET @v_net_copies = (@v_data_estversion$FINISHEDGOODQTY$2 - (@v_data_estversion$FINISHEDGOODQTY$2 * @v_return_rate / 100))

                                    SET @v_royalty_per_copy = (@v_total_royalty / @v_net_copies)

                                  END

				execute @v_errorseverity = GET_ESTMESSAGE_ERRORSEVERITY @v_estkey, @v_data_estversion$VERSIONKEY$2
				execute get_next_key 'qsidba',@newkey
                                INSERT INTO ESTBATCHREPRINTRESULT
                                  (
                                    ESTBATCHREPRINTRESULT.ESTBATCHREPRINTRESULTKEY, 
                                    ESTBATCHREPRINTRESULT.ISBN, 
                                    ESTBATCHREPRINTRESULT.QUANTITY, 
                                    ESTBATCHREPRINTRESULT.QUANTITYTYPE, 
                                    ESTBATCHREPRINTRESULT.EDITIONUNITCOST, 
                                    ESTBATCHREPRINTRESULT.PLANTCOST, 
                                    ESTBATCHREPRINTRESULT.TOTALUNITCOST, 
                                    ESTBATCHREPRINTRESULT.ROYALTYPERCOPY, 
                                    ESTBATCHREPRINTRESULT.LASTUSERID, 
                                    ESTBATCHREPRINTRESULT.LASTMAINTDATE, 
                                    ESTBATCHREPRINTRESULT.ERRORSEVERITYCODE, 
                                    ESTBATCHREPRINTRESULT.PRINTINGKEY
                                  )
                                  VALUES 
                                    (
                                      @newkey, 
                                      @v_data$ISBNX$2, 
                                      @v_data_estversion$FINISHEDGOODQTY$2, 
                                      5, 
                                      @v_edition_unit_cost, 
                                      @v_plant_total_cost, 
                                      @v_total_unitcost, 
                                      @v_royalty_per_copy, 
                                      user_name(), 
                                      getdate(), 
                                      @v_errorseverity, 
                                      @v_max_printingkey
                                    )

                              END
                            FETCH NEXT FROM c_estversion
                              INTO 
                                @v_data_estversion$VERSIONQTYTYPECODE$2, 
                                @v_data_estversion$FINISHEDGOODQTY$2, 
                                @v_data_estversion$VERSIONKEY$2, 
                                @v_data_estversion$ACTIVEIND$2
                          END

                        CLOSE c_estversion

                        DEALLOCATE c_estversion

                      END

                    END

                  FETCH NEXT FROM c_cursor
                    INTO @v_data$BOOKKEY$2, @v_data$PRINTINGKEY$2, @v_data$ISBNX$2

                END

              CLOSE c_cursor

              DEALLOCATE c_cursor

            END

            DECLARE 
              @param_expr_6$2 VARCHAR(8000)            

            SET @param_expr_6$2 = user_name()

            EXEC WRITE_QSIJOBMESSAGE @v_batchkey OUTPUT, @v_jobkey OUTPUT, 1, 7, 'Estimate Batch', 'Est. Batch', @param_expr_6$2, 0, 0, 0, 6, 'Reprint Result Process Copmleted', 'Reprint Result Process Copmleted', @v_retcode OUTPUT, @v_error_desc OUTPUT 

            IF (@@TRANCOUNT > 0)
                COMMIT WORK

          END
      END
go
grant execute on est_batch_reprint_result  to public
go

